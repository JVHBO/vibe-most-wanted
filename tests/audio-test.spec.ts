import { expect } from '@playwright/test';
import { metaMaskFixtures } from '@synthetixio/synpress-metamask/playwright';
import walletSetup from '../synpress.config';

const test = metaMaskFixtures(walletSetup);

test.describe('Vibe Most Wanted - Audio Controls Test', () => {
  test('Conectar wallet e testar controles de √°udio', async ({ page, metamask }) => {
    console.log('üåê Abrindo site Vibe Most Wanted...');
    await page.goto('https://vibe-most-wanted.vercel.app');

    // Aguarda p√°gina carregar
    await page.waitForLoadState('networkidle');
    console.log('‚úÖ P√°gina carregada');

    // Clica em Connect Wallet
    console.log('üîó Clicando em Connect Wallet...');
    const connectButton = page.getByRole('button', { name: 'Connect Wallet' });
    await connectButton.click();

    // Aguarda modal aparecer
    console.log('‚è≥ Aguardando modal de conex√£o...');
    await page.waitForSelector('[data-testid="rk-wallet-option-metaMask"]', { timeout: 10000 });

    // Clica em MetaMask
    console.log('ü¶ä Selecionando MetaMask...');
    await page.click('[data-testid="rk-wallet-option-metaMask"]');

    // Synpress automaticamente aprova a conex√£o
    console.log('‚úÖ Conectando wallet...');
    await metamask.connectToDapp();

    // Aguarda conex√£o ser estabelecida
    await page.waitForTimeout(5000);

    // Tira screenshot da p√°gina conectada
    await page.screenshot({ path: 'test-results/01-connected.png', fullPage: true });
    console.log('üì∏ Screenshot: test-results/01-connected.png');

    // Verifica se conectou (procura pelo endere√ßo truncado)
    const pageContent = await page.content();
    if (pageContent.includes('0xBb4c') || pageContent.includes('0xbb4c')) {
      console.log('‚úÖ Wallet conectada com sucesso!');
    } else {
      console.log('‚ö†Ô∏è  N√£o encontrei evid√™ncia de conex√£o, mas continuando...');
    }

    //Procura controles de √°udio
    console.log('üîä Procurando controles de √°udio...');

    // Espera um pouco para a UI atualizar
    await page.waitForTimeout(3000);

    // Verifica se h√° controles de m√∫sica
    const hasMusic = await page.evaluate(() => {
      const text = document.body.innerText;
      return {
        hasMusic: text.includes('MUSIC') || text.includes('‚ô´'),
        hasVolume: text.includes('VOLUME'),
        fullText: text.substring(0, 500)
      };
    });

    console.log('üéµ An√°lise de √°udio:', hasMusic);

    // Tenta encontrar slider de volume
    const volumeSliders = await page.locator('input[type="range"]').count();
    console.log(`üéöÔ∏è  Encontrados ${volumeSliders} sliders na p√°gina`);

    if (volumeSliders > 0) {
      console.log('‚úÖ Controles de volume encontrados! Testando...');

      const slider = page.locator('input[type="range"]').first();

      // Screenshot antes
      await page.screenshot({ path: 'test-results/02-before-volume-test.png' });

      // Teste 1: Volume 0
      console.log('üß™ Teste 1: Setando volume para 0...');
      await slider.fill('0');
      await page.waitForTimeout(2000);
      await page.screenshot({ path: 'test-results/03-volume-0.png' });

      // Teste 2: Volume 50
      console.log('üß™ Teste 2: Setando volume para 50...');
      await slider.fill('50');
      await page.waitForTimeout(2000);
      await page.screenshot({ path: 'test-results/04-volume-50.png' });

      // Teste 3: Volume 100
      console.log('üß™ Teste 3: Setando volume para 100...');
      await slider.fill('100');
      await page.waitForTimeout(2000);
      await page.screenshot({ path: 'test-results/05-volume-100.png' });

      // Teste 4: De volta para 0 (bug: 1->0 aumenta volume)
      console.log('üß™ Teste 4: De 100 para 0 (testando bug)...');
      await slider.fill('0');
      await page.waitForTimeout(2000);
      await page.screenshot({ path: 'test-results/06-volume-100-to-0.png' });

      console.log('‚úÖ Todos os testes de volume conclu√≠dos!');
    } else {
      console.log('‚ùå Nenhum controle de volume encontrado na p√°gina');

      // Tenta procurar por bot√µes de configura√ß√£o/settings
      const buttons = await page.locator('button').all();
      console.log(`üîç Encontrados ${buttons.length} bot√µes. Procurando por settings...`);

      await page.screenshot({ path: 'test-results/02-no-volume-found.png', fullPage: true });
    }

    // Verifica console do navegador
    console.log('üìã Checando console logs do navegador...');
    const consoleLogs = await page.evaluate(() => {
      // Retorna qualquer log que tenha sido capturado
      return (window as any).consoleLogBuffer || [];
    });

    console.log('Console logs:', consoleLogs);

    // Mant√©m navegador aberto
    console.log('‚è≥ Mantendo navegador aberto por 30 segundos para inspe√ß√£o manual...');
    await page.waitForTimeout(30000);

    console.log('‚úÖ Teste conclu√≠do!');
  });
});
