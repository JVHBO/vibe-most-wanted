{
  "rules": {
    "rooms": {
      "$roomCode": {
        ".read": true,
        ".write": "
          // Permite criar nova sala
          (!data.exists() && newData.exists()) ||
          // Permite atualizar se for o host ou guest
          (data.exists() && (
            newData.child('host/address').val() === auth.uid ||
            newData.child('guest/address').val() === auth.uid ||
            data.child('host/address').val() === auth.uid ||
            data.child('guest/address').val() === auth.uid
          )) ||
          // Permite deletar se for o host
          (data.exists() && !newData.exists() && data.child('host/address').val() === auth.uid)
        "
      }
    },

    "matchmaking": {
      "$address": {
        ".read": true,
        ".write": "$address === auth.uid || !data.exists()"
      }
    },

    "profiles": {
      "$address": {
        ".read": true,
        ".write": "
          // Permite criar perfil apenas para o próprio endereço
          (!data.exists() && $address === auth.uid) ||
          // Permite atualizar apenas o próprio perfil
          (data.exists() && $address === auth.uid)
        ",
        ".validate": "newData.hasChildren(['address', 'username', 'createdAt', 'lastUpdated', 'stats'])",
        "address": {
          ".validate": "newData.val() === $address"
        },
        "username": {
          ".validate": "newData.isString() && newData.val().length >= 3 && newData.val().length <= 20"
        },
        "twitter": {
          ".validate": "newData.isString() && newData.val().length <= 15"
        },
        "createdAt": {
          ".validate": "newData.isNumber() && (!data.exists() || newData.val() === data.val())"
        },
        "lastUpdated": {
          ".validate": "newData.isNumber()"
        },
        "stats": {
          ".validate": "newData.hasChildren(['totalCards', 'totalPower', 'pveWins', 'pveLosses', 'pvpWins', 'pvpLosses'])",
          "totalCards": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          },
          "totalPower": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          },
          "pveWins": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          },
          "pveLosses": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          },
          "pvpWins": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          },
          "pvpLosses": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          }
        }
      }
    },

    "usernames": {
      "$username": {
        ".read": true,
        ".write": "
          // Permite criar nova entrada de username
          !data.exists() ||
          // Permite atualizar se o valor atual aponta para o próprio endereço
          data.val() === auth.uid
        ",
        ".validate": "newData.isString()"
      }
    },

    "matches": {
      "$matchId": {
        ".read": true,
        ".write": "
          // Permite criar match apenas se for o playerAddress
          !data.exists() && newData.child('playerAddress').val() === auth.uid
        ",
        ".validate": "newData.hasChildren(['id', 'playerAddress', 'type', 'result', 'playerPower', 'opponentPower', 'timestamp', 'playerCards', 'opponentCards'])",
        "playerAddress": {
          ".validate": "newData.val() === auth.uid"
        },
        "type": {
          ".validate": "newData.val() === 'pve' || newData.val() === 'pvp'"
        },
        "result": {
          ".validate": "newData.val() === 'win' || newData.val() === 'loss' || newData.val() === 'tie'"
        },
        "playerPower": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "opponentPower": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "timestamp": {
          ".validate": "newData.isNumber()"
        }
      }
    }
  }
}
